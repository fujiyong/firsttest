定位
	1取代基于ip位置寻址的http web可能单点故障且可被isp篡改的服务器,而使用基于内容寻址的方式的永不离线的ipfs
	2成本提供存储, 所以需要支付FileCoin
	3相对于单节点存储,分布存储,下载效率更高;可以避免更多更大的DDOS攻击,安全性更高


Android
	安装软件 sshdroid  #参考https://blog.csdn.net/zhanghuoding/article/details/72848307
			可以得知 root@:2222
	登录    ssh -p 2222 root@192.168.1.152 提示默认密码是admin

	ps:  android termial #可以在手机上直接安装这个软件,就有termial client了,有hacker的感觉了
各平台编译
	android    make build CGO_ENABLED=0 GOOS=linux  GOARCH=arm
	centos     make build CGO_ENABLED=0 GOOS=linux  GOARCH=386   #GOARCH=amd64  make install
	mac        make build CGO_ENABLED=1 GOOS=darwin GOARCH=amd64
	windows    make build               GOOS=windows GOARCH=amd64
	


使用
	帮助
		ipfs --help
		ipfs commands
		ipfs $cmd --help

	环境变量
		默认数据文件夹是~/.ipfs,通过环境变量IPFS_PATH修改

	初始化	
		ipfs init -b -e -p  //b bytes秘钥长度  eemptyProject没有帮助文件 -p profile server/test/dedfault-store
			#ls -1 $IPFS_PATH
			blocks            #cid目录
			config            #配置文件
			datastore         #levelDb数据文件目录
			datastore_spec    #levelDb数据文件目录的缓存
			keystore          #密钥对文件 执行ipfs key gen时产生
			version
	配置
		允许跨域访问   ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '["*"]'
					  ipfs config --json API.HTTPHeaders.Access-Control-Allow-Credentials '["true"]'
					  ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '["PUT", "GET", "POST", "OPTIONS"]'
		允许api监听    ipfs config --json Addresses.API '"/ip4/0.0.0.0/tcp/5001"'              #默认只能通过127.0.0.1:5001本机访问
		配置网关监听   ipfs config --json Addresses.Gateway '"/ip4/0.0.0.0/tcp/8080"'          #默认只能通过127.0.0.1:8080本机访问
	启动
		ipfs daemon
	管理界面 查看系统状态 管理文件 配置系统
		http://192.168.1.152:5001/webui
	网关(ReadOnly)
		个人 https://localhost:8080/ipfs/$hash
		官方 https://ipfs.io/ipfs/$hash
		理想 ipfs://$hash

	操作
		添加 add --pin true 默认pin住 -s size-256k 默认块的大小为256K
			ipfs add    $filename       #返回的是用私钥签名的hash值只是文件内容的hash值,而没有文件名的信息  其实这里的hash用key更准确 key使用SFS的multi-format中的multi-hash表示
			                            # key = 1个字节的hash类型 + 1 个字节的hash值长度 + digest(hash(content),private_key) 是hash(content)的摘要,不是hash  
										#  访问内容的时候使用hash($digest) =? hash(content)这样的步骤进行验证
										# hash函数为sha-256
			ipfs add -rQ $dirname       #安静模式Q
			ipfs add -rQ .

			Wrapped形式   //总结 ls操作对象只能是目录  cat的对象只能是文件
				ipfs add -w $filename              #--wrap-with-directory 返回2个hash值 第一个是文件内容的hash值 第二个是文件名和文件所处的路径信息的hash值
				                                   #多hash指纹的多级路径访问机制
												   #	/ipfs/<hash-of-bar>/bar/baz
												   #    /ipfs/<hash-of-bar>/baz
												   #    /ipfs/<hash-of-baz>
				ipfs ls -v  $dir_hash2             #返回文件内容的hash1 文件size 文件名
				ipfs cat    $dir_hash2/$file_name  #不能 ipfs cat $dir_hash
				ipfs cat    $file_hash

			当文件大于size256K时,文件被切割成Block,这时可以通过查看根节点hash获取文件切割的小block hash
				ipfs object stat  $big_size_file_root_hash
				ipfs object links $big_size_file_root_hash

		查看
			本地节点
				ipfs cat /ipfs/$hash    #不用管原来的目录结构
				等价于 http://127.0.0.1:8080/ipfs/$hash
			全网节点
				https://ipfs.io/ipfs/$hash #若有内容,则上传至全网
			绑定ipns 解决文件更新问题, add a.txt && publish hash(a.txt) 以后a.txt内容变更也可以使用以前的hash(a.txt)
				绑定根节点     ipfs name publish --lifetime 999999h --ttl 300s --key=self /ipfs/$raw_dir_root_name_hash 
							  #绑定跟节点,以后访问都可以根据跟节点的相对路径访问 默认使用selfKey  
							  #如果网站重新部署,需要重新publish
							  #lifetime 就是可以用ifns替代ipfs的访问时长, 默认是24h
							  #ttl 就是 可以用ifns替代ipfs的访问的 在缓存中的时长, 如果超过这个时间就不能从缓存中访问,只能再请求一次实体
				根据跟节点访问 ipfs cat /ipfs/$raw_dir_root_name_hash/$raw_dir_second_level_name/$file_name
				              ipfs cat /ipns/`ipfs id`/$raw_dir_second_level_name/$file_name
				# publish之后就可以查看根上传的根目录的hash与ipfs id的对应关系
				ipfs name resolve `ipfs id`  #返回根目录的hash值对应的哪个publish操作时的hash值  ipns->ipfs之间的映射
			dns link 使用域名来代替ipns的peer hashID, 解决了需要记忆跟节点hash的问题
				ipfs cat /ipfs/ipfs.$raw_dir_root_name.org/$raw_dir_name/$file_name   //使用域名系统dns,保留原来的目录结构 
			                                                                      	  //dns系统需要添加一条记录txt记录
			                                                                          //   记录类型 txt
			                                                                          //   主机记录 ipfs
			                                                                          //   记录值   dnslink=/ipns/$node_id
																					  //   ipfs.benet.ai TXT "ipfs=xxxx"  等价于 ln -s /ipns/xxxx /ipns/benet.ai
			                                                                          //原来的目录结构是raw_dir_root_name/raw_dir2_name/file_name
		拉取
			ipfs get /ipfs/$hash   #使用公钥验证该hash是否有效
			等价于 http://127.0.0.1:8080/ipfs/$hash

	缓存
		为了快速提供本地服务,需提供缓存cache服务
		为了控制缓存的大小,执行ipfs repo gc需要从cache剔除掉一些一段时间内没使用的
		为防止一些需要的文件被剔除,需要使用pin命令固定在cache
		通过add添加的文件默认就是pin过的
		文件本地持久化 ipfs pin ls        #查看哪些文件是在本地的,没有从远程服务器下载下载.pin将长期保留在本地,而不会被垃圾回收
                      ipfs pin ls [-t | --type=all/direct/indirect/recursive] $hash  #查看$hash对应的文件时候被pin

                      ipfs pin add [-r | --recursive=true] $hash #一般添加其他ipfs节点的根目录hash值, 这样就将remote host的文件系统同步到本地 以便加速访问

                      ipfs pin rm -r false   $hash    #文件的hash  删除文件的pin状态
                      ipfs pin rm [-r true]  $hash    #目录的hash  删除目录的pin状态  recursive默认是true

	查看
		id            ipfs id       #实际就是hash(rsa.publicKey)
        配置参数含义   ipfs help init

        其他节点       ipfs swarm peers
					  ipfs swarm addrs
					  ipfs swarm connect /ipv4/$config中peer表示法

    修改配置.ipfs/config,再reboot
    	先修后改
    		导出原来配置     ipfs config show > ipfs.conf.json
    		导入修改后的配置 ipfs config replace ipfs.conf.json
    	直接修改
    		ipfs config edit

    当管理多个网站时,产生公钥
    	ipfs key list -l //默认有个名为self值为节点id的key
    	ipfs key gen --type=rsa --size=2048 mykey  #创建一个名为mykey的新key
    	ipfs add a.txt 
    	ipfs name publish --key=mykey $hash

终极删除
	ipfs pin ls -t recursive | cut -d ' ' -f1 | xargs -n1 ipfs pin rm
	ipfs repo gc

编码
	$cat tos.go
	package main

	import (
		"log"
		"runtime"
	)

	func main() {
		log.SetFlags(log.LstdFlags | log.Lshortfile)
		log.Printf("os:%s arch:%s", runtime.GOOS, runtime.GOARCH)
	}
编译
	$CGO_ENABLED=0 GOARCH=arm GOOS=linux go build -o tos tos.go
上传
	方式一: scp -P 2222 ./tos root@192.168.1.152:/data/data/berserker.android.apps.sshdroid/home/tmp
	方式二: adb push    ./tos /data/data/berserker.android.apps.sshdroid/home/tmp
运行
	方式一: ssh root@192.168.1.152
	方式二: adb shell
	cd /data/data/berserker.android.apps.sshdroid/home/tmp
	chmod +x ./tos
	./tos


scp -P 2222 ./ipfs root@192.168.1.152:/data/data/berserker.android.apps.sshdroid/home/tmp
scp -P 2222 ./swarm.key root@192.168.1.152:/data/data/berserker.android.apps.sshdroid/home/.ipfs

./ipfs bootstrap add /ip4/192.168.1.106/tcp/4001/ipfs/QmbHSSGasagTkVdxymVpU5W2DYSMyYdsHMwGgZ5dmp15gn

npm install --unsafe-perm=true --allow-root



nodejs.api
https://github.com/ipfs/go-ipfs-api



sudo apt-get install build-essential libssl-dev libcurl4-gnutls-dev libexpat1-dev gettext unzip



multi-format: multi是由多部分组成的,类似于通讯协议里的TLV结构 format有针对通讯的/存储的
Self Describing format: 指的是TLV中说明了Type length
Self-Certifying File System: 指的是TLV中V的自我签名/摘要验证

MerkeleTree
	叶子是数据块(例如文件交易)的hash值,非叶子节点是对应子节点字符串的hash值
MerkeleDAG   directed acyclic graph 有向无环图
	  将文件分成若干部分,并计算各部分的hash值,利用这些hash值构建对应文件的DAG,DAG的根节点就是文件的hash值
	  节点包括2部分,Data和link; Data为二进制,Link包含Name hash size这3部分
	  特点
	  	内容寻址  使用多重hash来唯一标识一个数据块的内容
		防篡改    使用hash来确定数据是否被篡改
		去重      由于内容相同的数据块 hash值是相同的,很容易去掉重复的数据,节省存储空间
IPLD  interPlanetary Linked Data
	  数据格式转换中间件 将现有的异构数据(比特币以太坊的块数据等)统一成一种统一的标准格式进行传输
CID   内容识别符 实际就是返回的hash值 如/ipfs/xxxxxxx中的xxxx


协议栈
	加密/描述数据 multiformats  用于加密和描述nodeID和contentID的生成
		身份				Self Describing format
	传递数据	     libp2p	       用于适配各种各样的传输层协议和连接众多复杂的设备
		网络层Network   establishing connections between peers                       config文件里的bootstrap节点定义了ip/协议          
		路由层Routing   locating peers and objects              DHT结构                  value长度小的值直接存储到dht上;更大的值,dht只存储值索引,索引就是一个节点的NodeID
		交换层Exchange  block transport and replication         BitSwap协议/BitTorrent
	结构数据  IPLD 
		对象层Object                                            MerkleDAG/IPLD        个人理解单节点MerkleDAG, 节点之间IPLD CID
		文件层File                                              Git                   可以通过ipfs object links $root-hash
		命名层Naming    a Self-certifying PKI namespace (IPNS)  IPNS/SFS自验证文件系统 Self-Certifying File System
	应用数据
		ipfs
	价值数据
		FileCoin                                                激励 交易






ipfs dag
	put        //echo  "ccccc" | ipfs dag put
	get        //ipfs dag get $hash
	resolve
ipfs block 操作raw ipfs blocks的plumbing command 底层命令
	put         //echo "aaaa" | ipfs block put
	get  $hash
	rm   $hash
	stat $hash  //返回hash和size
ifps object  操作dag的plumbing command 底层命令
	put <data> 
	get $hash
	data $hash
	stat $hash
	links $hash   #可以从返回的links字段是一个数组,这个数组里的每个元素的name字段依据"/"分割形成一棵树,  这就是所谓的DAG

	diff  <obj-a obj-b>
	new   [template]
	patch
		patch add-link
		patch append-data  $hash $data
		patch rm-link
ipfs files
	write    //echo "hello world" | ipfs files write --create -p /myfs/a
	flush    //ipfs files flush  /myfs/a
	read     //ipfs files read   /myfs/a
	ls       //ipfs files ls     /myfs
	rm       //ipfs files rm     /myfs/a
	stat     //ipfs files stat   /myfs/a

	cp
	mkdir   //ipfs files mkdir -p /test/does/not/exist/yet
	mv


bootstrap 修改配种文件中的启动节点
	add /ip4/$ip4/tcp/4001/ipfs/`ipfs id`    #multiAddr
	rm  /ip4/$ip4/tcp/4001/ipfs/`ipfs id`
	rm all
	list
swarm	在ipfs运行时执行命令
	peers                                       
	connect  /ip4/$ip4/tcp/4001/ipfs/`ipfs id`  //直连
dht  分布式hash表
	findpeer   `ipfs id` 
	query	`ipfs id`

	findprovs  $hash   //返回哪些peer可以提供查询这个hash 即hash内容的分部部署情况
	provide $hash      //向network宣称自己有hash,只是有hash但不能提供查询hash所指的content的场合  比如自身节点有问题,不能提供查询服务

	put /ipns/${peer-id}    "xxxx"
	get  $hash
diag 诊断
	cmds
	cmds clear
	cmds set-time
	sys
ipfs bitswap  交换协议
	ledger
	reprovide
	stat
	wantlist

cid内容识别符
	base32
	bases
	codes
	format
	hashes
config
	edit
	profile
	profile apply
	replace
	show
key
	gen
	list
	rename
	rm
log
	level
	ls
	tail

ipfs filestore
	dups
	ls
	verify
name
	publish
	pubsub
	pubsub cancel
	pubsub state
	resolve

p2p
	close
	forward
	listen
	stream
	stream close
	stream ls












FileCoin 
	去中心化存储网络协议 DSN  Decentralized Storage Network
	报价 ask
	出价 bid
	订单簿 Order  订单的合集



	链上 On Chain
	链下 Off Chain

	复制证明ProofOfReplication PoRep 权益证明ProofOfStorage
		用户发送数据到矿工,矿工接收数据并给出数据已存储的证明   
	时空证明ProofOfSpacetime PoSt    算力证明ProofOfWork
		矿工存储完之后,该订单写入区块链永久保存,区块链清算支付结果. 此后矿工要不断的向网络证明(时空证明)自己一直存储有该数据,直到该数据存储合约到期
		一连串的复制证明
		反映了一段时间内存储矿工的算力的大小

https://blog.csdn.net/xin1889/article/details/80025564

user:password@host:port


nmtui  pe
ip/mask_len     10.0.0.10/8 已知IP是32位,8位掩码即255.0.0.0

arp -n | sort -t . -k1,1n -k2,2n -k3,3n -k4,4n  #查询局域网内所有主机并按IP排序

		



网络
	DHCP  dynamic host configuration protocol
		安装 yum install dhcpd
		配置

	DNS    #https://help.aliyun.com/knowledge_detail/29725.html
		A	 IP指向地址Address IP4 	实现域名指向IP   最重要的  
			www   @          记录值$IP
			场景： 我们最终的查询的IP就是这条记录的IP
			多条记录实现负载均衡
		AAAA  Address IPV6  实现域名指向IP   A记录的升级版
							 记录值$IP6
		NS   名称服务器NameServer 当需要将子域名的解析交给其他DNS服务商解析
					记录值 被授权的其他DNS服务器域名,可以是IP或主机名
			场景： 上级查询下级时， 比如com查询baudu.com时
			记录优先级高于A记录
			
		CNAME  别名指向canonicalName   优先级低于A记录
			当需要将域名指向另一个域名,再由另一个域名提供IP地址  场景:CDN 企业邮箱 全局流量管理
				www @        记录值 另一个域名,只能使用主机名,不能是IP值
		MX   用于解析电子邮件地址中@后面的内容进行解析
		                     记录值可以是IP或主机名
			 多条记录实现负载均衡
		TXT  对域名进行标识或说明   多用于反垃圾邮件SPF记录
							记录值 "v=spf1 a mx ~all"

		SRV   用来标识某台服务器使用了某个服务, 常用于微软系统的目录管理
							记录值的格式  优先级 权重 端口 目标地址 0 5 5060 sipserver.example.com
		CAA
		URL显性/隐形转发
			隐性  浏览器地址栏输入 http://a.com   打开的是http://b.com 浏览器地址栏显示http://a.com
			显性  浏览器地址栏输入 http://a.com   打开的是http://b.com 浏览器地址栏显示http://b.com   类似于http301 302

		Non-authoritative answer: 查询的是缓存,不是实际查询, 这个缓存时间就是TTL

		host [-a] www.baidu.com [$dns-server]
			-a #all 所有信息
			#dns-server  指定使用特定的dns server查询
			
		nslookup www.baidu.com [$dns-server]
		
		dig [option] www.baidu.com [$dns-server]
			option
				+trace            从根节点.开始跟踪
				-type [mx A ns]   记录类型
				-x                反查
			正查	
				dig        www.baidu.com
				dig +trace www.baidu.com
			反查
				dig -x     $ip

		whois baidu.com   #查询域名的create/expire time 


		nmcli device show eth0  #CentOS 查IP GateWay/Route DNS   //apt-get install network-manager

#### 设置
#my-dns-tool set --type=TXT --ttl=60 --domain=libp2p.io --name=_dnslink --value="dnslink=/ipfs/Qmc2o4ZNtbinEmRF9UGouBYTuiHbtCSShMFRbBY5ZiZDmU"
_dnslink.libp2p.io TXT 60 dnslink=/ipfs/Qmc2o4ZNtbinEmRF9UGouBYTuiHbtCSShMFRbBY5ZiZDmU
		
### 自检
#dig +short TXT _dnslink.libp2p.io
dnslink=/ipfs/Qmc2o4ZNtbinEmRF9UGouBYTuiHbtCSShMFRbBY5ZiZDmU
#dig +noall +answer TXT _dnslink.docs.ipfs.io

### 运用
#ipfs ls /ipns/libp2p.io


/etc/rc.d/init.d/network start
service network restart
/etc/rc.d/rc.local




################ Master ###################
local pubKeyFile="~/.ssh/id_rsa.pub"
if [ -f $pubKeyFile ]; then
	ssh-keygen 
fi

MasterHostIP=""
MasterPeerID=""

############## Slave #######################
local ips=()

#确保免密登录
for ip in $ips; do
	ssh-copy-id -i $pubKeyFile  root@$ip
done



#删除ipfs垃圾数据
for ip in $ips; do
	ssh root@ip "rm -rf ~/{ipfs,ipfs-data}"
	scp -r ~/ipfs       root@$ip
	scp -r ~/ipfs-data  root@$ip
done


#环境变量
for ip in $ips; do

	ssh root@$ip "source ~/.bash_profile"

	local r=`ssh root@$ip "which ipfs"`
	if [ $r == "" ]; then
		setPath='export PATH=$PATH:~/ipfs'
		ssh root@ip "echo $setPath >> ~/.bash_profile;"
	fi

	r=`ssh root@$ip "env | grep \"IPPS_PATH\""`
	if [ $r == "" ]; then
		setPath='export IPPS_PATH=~/ipfs-data'
		ssh root@ip "echo $IPPS_PATH >> ~/.bash_profile;"
	fi

done

#防火墙


#初始化
for ip in $ips; do
	ssh root@$ip "ipfs init"
	ssh root@$ip "ipfs bootstrap rm --all"
	ssh root@$ip "ipfs bootstrap add /ip4/${MasterHostIP}/tcp/4001/ipfs/${MasterPeerID}"
done


#数据
dirHash=`ipfs add -r ~/ipfstestdata | tail -n 1 | cut -d' ' -f 2`
[ -z $dirHash ] && return
ipfs name publish $dirHash




#运行
for ip in $ips; do
	ssh root@$ip "ipfs daemon 2>&1 1>>~/ipfs.log &
done


#测试
for ip in $ips; do
	r=`ssh root@$ip "ipfs cat /ipns/${MasterPeerID}/a/a.txt"`
	if [ $r == "aaa" ]; then
		echo "$ip OK"
	else
		echo "$ip Fail and return $r"
	fi
done